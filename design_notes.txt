
//RETHINK!
//Trying to seperate the platform - generator - core code is just overcomplicating the code heirarchy and limiting core portability
//Just move everything into core and use stretchy buffers as the generic data type
//Try to keep scope of the core code limited to avoid the need for code generation - need:
//Platform layer, alloctors (arena, pool, tagged, temp), plugin system for hot loading DLLs, logging and profiling functions

Game design:

Thief style game, missions in "spoke" based levels with a central location surrounded by smaller exploration zones
Time is a factor, there are timed events in the mission that can effect the level e.g weather
1910s-20s aesthetic, look at 90s Coen brothers movies like Miller's Crossing, Malick films (Days of Heaven)

Code thoughts:
Do opaque structs provide type safety over void pointers? Research

Code layout:

Each folder in the "code" directory is it's own module compiled to a DLL. The heirarchy is:

Platform
Generated Code
Core